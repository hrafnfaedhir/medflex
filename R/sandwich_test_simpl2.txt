library(medflex)
library(sandwich)

impData <- neImpute(UPB ~ att + negaff + gender + educ + age,
                    family = binomial("probit"), data = UPBdata)
neMod <- neModel(UPB ~ att0 + att1 + gender + educ + age,
                 family = binomial("probit"), expData = impData, nBoot = 100)

fit1 <- neMod$neModelFit
fit2 <- attr(impData, "model")


## ESTIMATING EQUATIONS (SCORE FUNCTIONS)
estEq1 <- estfun(fit1)
estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])

estEq2 <- estfun(fit2)

estEq <- cbind(estEq1, estEq2)


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD

# diagonal inv bread (easy!) 
breadInv11 <- solve(bread(fit1))
breadInv22 <- solve(bread(fit2))

# off-diagonal

### AANPASSEN (afhankelijk maken van fit1 model.matrix/.frame)

adaptx <- function(expData, neModel, FUN) {
    fit1 <- neModel$neModelFit
    fit2 <- attr(expData, "model")
    vartype <- attr(terms(neModel), "vartype")
    tmp <- FUN(fit1)
    tmp <- cbind(tmp, M = fit1$data[, vartype$M])
    colnames(tmp)[ncol(tmp)] <- vartype$M
    if (inherits(expData, "impData")) { 
      colnames(tmp) <- gsub(vartype$Xexp[[1]], vartype$X, colnames(tmp)) 
    } 
    else if (inherits(expData, "weightData")) { 
      colnames(tmp) <- gsub(vartype$Xexp[[2]], vartype$X, colnames(tmp)) 
    }    
    tmp <- tmp[, colnames(FUN(fit2))]
    return(tmp)
}

xmat12 <- adaptx(impData, neMod, model.matrix)
xframe12 <- adaptx(impData, neMod, model.frame)

# head(xmat12)
# head(xframe12)

# xmat.adapt <- model.matrix(fit1)
# xmat.adapt <- xmat.adapt[, !colnames(xmat.adapt) %in% "(weights)"]
# xmat.adapt <- cbind(xmat.adapt, M = fit1$data[, attr(terms(neMod), "vartype")$M])
# colnames(xmat.adapt)[ncol(xmat.adapt)] <- attr(terms(neMod), "vartype")$M
# colnames(xmat.adapt) <- gsub(attr(terms(neMod), "vartype")$Xexp[[1]], attr(terms(neMod), "vartype")$X, colnames(xmat.adapt))
# xmat.adapt <- xmat.adapt[, colnames(model.matrix(fit2))]
# 
# xframe.adapt <- model.frame(fit1)
# xframe.adapt <- xframe.adapt[, !colnames(xframe.adapt) %in% "(weights)"]
# xframe.adapt <- cbind(xframe.adapt, M = fit1$data[, attr(terms(neMod), "vartype")$M])
# colnames(xframe.adapt)[ncol(xframe.adapt)] <- attr(terms(neMod), "vartype")$M
# colnames(xframe.adapt) <- gsub(attr(terms(neMod), "vartype")$Xexp[[1]], attr(terms(neMod), "vartype")$X, colnames(xframe.adapt))
# xframe.adapt <- xframe.adapt[, colnames(model.frame(fit2))]

###
# ind <- rep(seq.int(nrow(fit2$data)), each = nrow(fit1$data) / nrow(fit2$data))
# 
# modmat <- model.matrix(fit2)[ind, ]
# modmat[, attr(terms(impData), "vartype")$X] <- model.matrix(fit1)[, attr(terms(impData), "vartype")$Xexp[1]]
# 
# modframe <- model.frame(fit2)[ind, ]
# modframe[, attr(terms(impData), "vartype")$X] <- model.frame(fit1)[, attr(terms(impData), "vartype")$Xexp[1]]
# 
# xmat.adapt <- modmat
# xframe.adapt <- modframe

## REDUNDANT
# ALTERNATIEF!!! (moeilijkheid: en residuals(x, "working") en vooral weights(x, "working) vervangen)
# residuals zelfs niet nodig!!!
# res <- modframe$UPB - predict(fit1, newdat = modframe, type = "response")
# reswor <- res / fit1$family$mu.eta(predict(fit1, newdat = modframe)) #residuals.glm
# wres <- as.vector(reswor) * (fit1$family$mu.eta(predict(fit1, newdat = modframe))^2)/fit1$family$variance(fit1$family$linkinv(predict(fit1, newdat = modframe)))
# dispersion <- if (substr(fit1$family$family, 1, 17) %in% c("poisson", "binomial", "Negative Binomial")) 1 else sum(wres^2, na.rm = TRUE)/sum(weights(fit1, "working"), na.rm = TRUE)
# rval <- wres * modmat/dispersion
# deriv1b2 <- rval * fit1$family$variance(predict(fit1, newdat = modframe, type = "response")) / res

# wres = dmudeta * resid / varmu

# estfun = wres * xmat / dispersion
# estfun = (dmudeta * resid / varmu) * xmat / dispersion
# estfun = dmudeta * resid * xmat / (dispersion * varmu)

# wanted: dmudeta * xmat = estfun * dispersion * varmu / resid

## REDUNDANT
# wres <- as.vector(residuals(fit2, "working")) * weights(fit2, "working")
# dispersion <- if (substr(fit2$family$family, 1, 17) %in% c("poisson", "binomial", "Negative Binomial")) 1 else sum(wres^2, na.rm = TRUE)/sum(weights(fit2, "working"), na.rm = TRUE)
# deriv2 <- estfun(fit2) * dispersion * fit2$family$variance(predict(fit2, type = "response")) / resid(fit2, type = "response")
# # deriv2 not needed (but calculated as illustration)

## REDUNDANT
# wanted: dmudeta * xmat.adapt

## REDUNDANT
# weights <- (fit1$family$mu.eta(predict(fit1, newdat = modframe))^2) / fit1$family$variance(fit1$family$linkinv(predict(fit1, newdat = modframe))) # glm.fit
# dispersion <- if (substr(fit1$family$family, 1, 17) %in% c("poisson", "binomial", "Negative Binomial")) 1 else sum(wres^2, na.rm = TRUE)/sum(weights(fit1, "working"), na.rm = TRUE)
# # wres!!!
# deriv12 <- weights * modmat/dispersion * fit1$family$variance(predict(fit1, newdat = modframe, type = "response")) / fit1$family$mu.eta(predict(fit1, newdat = modframe))
# head(deriv12)

# shorter:
deriv12 <- xmat12 * fit2$family$mu.eta(predict(fit2, newdat = xframe12))
# estfun(fit2) / resid(fit2, type = "response")

breadInv12 <- -t(estfun(fit1) / resid(fit1, type = "response")) %*% deriv12 / nrow(fit1$data)

breadInv21 <- matrix(0, nrow = ncol(breadInv12), ncol = nrow(breadInv12), dimnames = list(colnames(breadInv12), rownames(breadInv12)))

bread <- solve(rbind(cbind(breadInv11, breadInv12), 
                     cbind(breadInv21, breadInv22)))

vcov <- (bread %*% meat %*% t(bread)) / length(unique(fit1$data$id))
sqrt(diag(vcov))

sqrt(diag(vcov(neMod)))
