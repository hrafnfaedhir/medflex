library(medflex)
library(sandwich)
library(Matrix)

## IMPUTATION-BASED APPROACH

impData <- neImpute(UPB ~ att + negaff + gender + educ + age,
                    family = binomial, data = UPBdata)
system.time(
neMod <- neModel(UPB ~ att0 + att1 + gender + educ + age,
                 family = binomial, expData = impData, nBoot = 100)
)
fit1 <- neMod$neModelFit
fit2 <- attr(impData, "model")


## ESTIMATING EQUATIONS (SCORE FUNCTIONS)
estEq1 <- estfun(fit1)
estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])

estEq2 <- estfun(fit2)

estEq <- cbind(estEq1, estEq2)


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD
breadInv11 <- solve(bread(fit1))
breadInv22 <- solve(bread(fit2))

# off-diagonal
adaptx <- function(expData, neModel, FUN, numdenom = NULL) {
  fit1 <- neModel$neModelFit
  fit2 <- attr(expData, "model")
  vartype <- attr(terms(neModel), "vartype")
  tmp <- FUN(fit1)
  tmp <- cbind(tmp, M = fit1$data[, vartype$M])
  colnames(tmp)[ncol(tmp)] <- vartype$M
  if (all(inherits(expData, "weightData"), numdenom == "num")) { 
    colnames(tmp) <- gsub(vartype$Xexp[[2]], vartype$X, colnames(tmp)) 
  } 
  else {
    colnames(tmp) <- gsub(vartype$Xexp[[1]], vartype$X, colnames(tmp))
  } 
  tmp <- tmp[, colnames(FUN(fit2))]
  return(tmp)
}

xmat12 <- adaptx(impData, neMod, model.matrix)
xframe12 <- adaptx(impData, neMod, model.frame)

deriv12 <- xmat12 * fit2$family$mu.eta(predict(fit2, newdat = xframe12))

breadInv12 <- -t(estfun(fit1) / resid(fit1, type = "response")) %*% deriv12 / nrow(fit1$data)

breadInv21 <- matrix(0, nrow = ncol(breadInv12), ncol = nrow(breadInv12), dimnames = list(colnames(breadInv12), rownames(breadInv12)))

bread <- solve(rbind(cbind(breadInv11, breadInv12), 
                     cbind(breadInv21, breadInv22)))

vcov <- (bread %*% meat %*% t(bread)) / length(unique(fit1$data$id))
sqrt(diag(vcov))

sqrt(diag(vcov(neMod)))



## WEIGHTING-BASED APPROACH

## continuous mediator

# UPBdata$negaffbin <- cut(UPBdata$negaff, breaks = 2, labels = c("low", "high"))
weightData <- neWeight(negaff ~ att + gender + educ + age,
                       data = UPBdata)
system.time(
  neMod <- neModel(UPB ~ att0 + att1 + gender + educ + age,
                   family = binomial, expData = weightData, nBoot = 100)
)
fit1 <- neMod$neModelFit
fit2 <- attr(weightData, "model")


## ESTIMATING EQUATIONS (SCORE FUNCTIONS)
estEq1 <- estfun(fit1)
estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])

estEq2 <- estfun(fit2)

estEq <- cbind(estEq1, estEq2)


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD

# diagonal inv bread (easy!) 
breadInv11 <- solve(bread(fit1))
breadInv22 <- solve(bread(fit2))

# off-diagonal

#### binary M

# # numerator
# xmat12num <- adaptx(weightData, neMod, model.matrix, numdenom = "num")
# xframe12num <- adaptx(weightData, neMod, model.frame, numdenom = "num")
# deriv12num <- xmat12num * fit2$family$mu.eta(predict(fit2, newdat = xframe12num))
# 
# # denominator
# xmat12denom <- adaptx(weightData, neMod, model.matrix, numdenom = "denom")
# xframe12denom <- adaptx(weightData, neMod, model.frame, numdenom = "denom")
# deriv12denom <- xmat12denom * fit2$family$mu.eta(predict(fit2, newdat = xframe12denom))
# 
# # chain rule
# deriv12 <- (deriv12num * predict(fit2, newdat = xframe12denom, type = "response") - deriv12denom * predict(fit2, newdat = xframe12num, type = "response")) / predict(fit2, newdat = xframe12denom, type = "response")^2
# breadInv12 <- -t(estfun(fit1)) %*% deriv12 / nrow(fit1$data)



#### continuous M => needs to be adapted according to type of mediator! ==> switch???

sigma <- summary(fit2)$dispersion
derivFUN <- deriv(~ (sqrt(2 * pi) * sigma)^(-1) * exp(- (M - mu)^2 / (2 * sigma^2)), "mu")
#derivFUN <- deriv(~ (sqrt(2 * pi) * 1)^(-1) * exp(- (M - 0)^2 / (2 * 1^2)), "M")
#derivFUN <- deriv(~ dnorm(M), "mu") # same result
#derivFUN <- deriv(~ dnorm((M - mu) / sigma), "mu")

# numerator
xmat12num <- adaptx(weightData, neMod, model.matrix, numdenom = "num")
xframe12num <- adaptx(weightData, neMod, model.frame, numdenom = "num")
mu <- predict(fit2, newdat = xframe12num, type = "response")
M <- xframe12num[, attr(terms(neMod), "vartype")$M]
deriv12densnum <- eval(derivFUN)
deriv12num <- xmat12num * fit2$family$mu.eta(predict(fit2, newdat = xframe12num)) * as.vector(attr(deriv12densnum, "gradient"))

# denominator
xmat12denom <- adaptx(weightData, neMod, model.matrix, numdenom = "denom")
xframe12denom <- adaptx(weightData, neMod, model.frame, numdenom = "denom")
mu <- predict(fit2, newdat = xframe12denom, type = "response")
M <- xframe12denom[, attr(terms(neMod), "vartype")$M]
deriv12densdenom <- eval(derivFUN)
deriv12denom <- xmat12denom * fit2$family$mu.eta(predict(fit2, newdat = xframe12denom)) * as.vector(attr(deriv12densdenom, "gradient"))

# quotient rule
deriv12 <- (deriv12num * deriv12densdenom - deriv12denom * deriv12densnum) / deriv12densnum^2
#head(estfun(fit1))
#head((fit1$family$mu.eta(predict(fit1, type = "link")) * weights(fit1) * residuals(fit1, type = "response") * model.matrix(fit1)) / (summary(fit1)$dispersion * fit1$family$variance(predict(fit1, type = "response"))))
### TYPE = "LINK" VOOR MU.ETA => NOG OP ANDERE PLAATSEN VERKEERD? => INDIEN JA => AANPASSEN!
# breadInv12 <- -t(estfun(fit1) / weights(fit1)) %*% deriv12 / nrow(fit1$data) # delen door weights of niet??
breadInv12 <- -t(estfun(fit1)) %*% deriv12 / nrow(fit1$data) # delen door weights of niet??

breadInv21 <- matrix(0, nrow = ncol(breadInv12), ncol = nrow(breadInv12), dimnames = list(colnames(breadInv12), rownames(breadInv12)))

# breadInv12 <- matrix(0, nrow = ncol(breadInv21), ncol = nrow(breadInv21), dimnames = list(colnames(breadInv21), rownames(breadInv21)))

bread <- solve(rbind(cbind(breadInv11, breadInv12), 
                     cbind(breadInv21, breadInv22)))

vcov <- (bread %*% meat %*% t(bread)) / length(unique(fit1$data$id))
sqrt(diag(vcov))

sqrt(diag(vcov(neMod)))




## WEIGHTED IMPUTATION-BASED APPROACH

xFit <- glm(att ~ gender + educ + age, data = UPBdata)
impData <- neImpute(UPB ~ att + negaff + gender + educ + age,
                    family = binomial, data = UPBdata)
system.time(
  neMod <- neModel(UPB ~ att0 + att1, family = binomial, 
                   expData = impData, xFit = xFit, nBoot = 100)
)

fit1 <- neMod$neModelFit
fit2 <- attr(impData, "model")
fit3 <- xFit

## ESTIMATING EQUATIONS (SCORE FUNCTIONS)
estEq1 <- estfun(fit1)
estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])

estEq2 <- estfun(fit2)

estEq3 <- estfun(fit3)

estEq <- cbind(estEq1, estEq2, estEq3)


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD

# diagonal inv bread (easy!) 
breadInv11 <- solve(bread(fit1))
breadInv22 <- solve(bread(fit2))
breadInv33 <- solve(bread(fit3))

# off-diagonal

xmat12 <- adaptx(impData, neMod, model.matrix)
xframe12 <- adaptx(impData, neMod, model.frame)

deriv12 <- xmat12 * fit2$family$mu.eta(predict(fit2, newdat = xframe12))

breadInv12 <- -t(estfun(fit1) / resid(fit1, type = "response")) %*% deriv12 / nrow(fit1$data)

breadInv21 <- matrix(0, nrow = ncol(breadInv12), ncol = nrow(breadInv12), dimnames = list(colnames(breadInv12), rownames(breadInv12)))

library(Matrix)
breadnames <- unlist(sapply(list(breadInv11, breadInv22, breadInv33), colnames))
#breadInv <- as.matrix(bdiag(breadInv11, breadInv22, breadInv33))
#dimnames(breadInv) <- list(breadnames, breadnames)
bread <- as.matrix(solve(bdiag(breadInv11, breadInv22, breadInv33)))
dimnames(bread) <- list(breadnames, breadnames)

# bread <- solve(rbind(cbind(breadInv11, breadInv12, breadInv13),
#                      cbind(breadInv21, breadInv22, breadInv23)
#                      cbind(breadInv31, breadInv32, breadInv33)))

vcov <- (bread %*% meat %*% t(bread)) / length(unique(fit1$data$id))
sqrt(diag(vcov))

sqrt(diag(vcov(neMod)))

