library(medflex)

source("~/Documents/ugent/drafts/R package/JSSstyle/flexmed_v0.15d.R")
library(sandwich)
library(Matrix)

## IMPUTATION-BASED APPROACH

# tmp <- model.matrix(~ UPBdata$educ)[, -1]
# UPBdata <- data.frame(UPBdata, educM = tmp[, 1], educH = tmp[, 2])

dat$educL <- ifelse(dat$educ == "L", 1, 0)
dat$educM <- ifelse(dat$educ == "M", 1, 0)

impData <- neImpute(UPB ~ att + negaff + gender + educL + educM + age,
                    family = binomial, data = dat)
system.time(
  neMod <- neModel(UPB ~ att0 + att1 + gender + educL + educM + age,
                   family = binomial, expData = impData, nBoot = 1000)
)
fit1 <- neMod$neModelFit
fit2 <- attr(impData, "model")

# impData <- ne.impute(UPB ~ att + negaff + gender + educ + age,
#                     family = binomial, data = dat, n.exp = 5)
# system.time(
#   neMod <- ne.model(UPB ~ att.de + att.ie + gender + educ + age,
#                    family = binomial, ne.data = impData, bootstrap = TRUE, R = 1000)
# )
# fit1 <- neMod$mod$glm
# fit2 <- impData$glm

## ESTIMATING EQUATIONS (SCORE FUNCTIONS)
# estEq1 <- estfun(fit1)
estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])
# estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$subject)), FUN = mean)[, -1])

estEq2 <- estfun(fit2)

estEq <- cbind(estEq1, estEq2)


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD

# diagonal inv bread (easy!) 
breadInv11 <- solve(bread(fit1))
breadInv22 <- solve(bread(fit2))

# off-diagonal

# adaptx <- function(expData, neModel, FUN, numdenom = NULL) {
#   fit1 <- neModel$neModelFit
#   fit2 <- attr(expData, "model")
#   vartype <- attr(terms(neModel), "vartype")
#   tmp <- FUN(fit1)
#   tmp <- cbind(tmp, M = fit1$data[, vartype$M])
#   colnames(tmp)[ncol(tmp)] <- vartype$M
#   if (all(inherits(expData, "weightData"), numdenom == "num")) { 
#     colnames(tmp) <- gsub(vartype$Xexp[[2]], vartype$X, colnames(tmp)) 
#   } 
#   else {
#     colnames(tmp) <- gsub(vartype$Xexp[[1]], vartype$X, colnames(tmp))
#   } 
#   tmp <- tmp[, colnames(FUN(fit2))]
#   return(tmp)
# }

adaptx <- function(expData, neModel, FUN, numdenom = NULL, xFit = NULL) {
  fit1 <- neModel$neModelFit
  fit2 <- if (is.null(xFit)) attr(expData, "model") else xFit
  vartype <- attr(terms(neModel), "vartype")
  
  form <- as.character(fit2$formula)
  replacement <- if (all(inherits(expData, "weightData"), numdenom == "num")) vartype$Xexp[[2]] else vartype$Xexp[[1]]
  form <- gsub(vartype$X, replacement, form)
  form <- as.formula(paste0(form[2], form[1], form[3]))
  tmp <- FUN(update(glm(fit1), form, data = expData))
  
  if (all(inherits(expData, "weightData"), numdenom == "num")) { 
    colnames(tmp) <- gsub(vartype$Xexp[[2]], vartype$X, colnames(tmp)) 
  } else {
    colnames(tmp) <- gsub(vartype$Xexp[[1]], vartype$X, colnames(tmp))
  } 
  return(tmp)
}
xmat12 <- adaptx(impData, neMod, model.matrix)
xframe12 <- adaptx(impData, neMod, model.frame)

deriv12 <- xmat12 * fit2$family$mu.eta(predict(fit2, newdat = xframe12))

breadInv12 <- -t(estfun(fit1) / resid(fit1, type = "response")) %*% deriv12 / nrow(fit1$data)

breadInv21 <- matrix(0, nrow = ncol(breadInv12), ncol = nrow(breadInv12), dimnames = list(colnames(breadInv12), rownames(breadInv12)))

bread <- solve(rbind(cbind(breadInv11, breadInv12), 
                     cbind(breadInv21, breadInv22)))

vcov <- (bread %*% meat %*% t(bread)) / length(unique(fit1$data$id))
sqrt(diag(vcov))

sqrt(diag(vcov(neMod)))


