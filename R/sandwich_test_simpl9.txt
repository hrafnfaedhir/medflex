library(medflex)
library(sandwich)
library(Matrix)

mgsub <- medflex:::mgsub

indmatch <- function (x, y) {
  tmp <- which(sapply(seq.int(length(y) - length(x) + 1), function(i) identical(x, y[i + (seq_along(x)-1)])))
  return(seq.int(x) - 1 + tmp)
}

adaptx <- function(expData, neModelFit, obs = NULL, xFit = NULL) {
  fit1 <- neModelFit
  fit2 <- if (missing(xFit)) attr(expData, "model") else xFit
  vartype <- attr(terms(expData), "vartype")
  
  if (inherits(expData, "weightData")) X <- ifelse(obs, vartype$Xexp[[1]], vartype$Xexp[[2]])
  else if (inherits(expData, "impData")) X <- ifelse(obs, vartype$Xexp[[2]], vartype$Xexp[[1]])
  
  ind <- c(unlist(vartype[c("Y", "M", "C")]), X)
  if (is.na(ind["Y"])) vartype$Y <- ind["Y"] <- all.vars(fit1$formula)[1]
  
  newdat <- expData[, ind]
  colnames(newdat) <- gsub(X, vartype$X, colnames(newdat))
  newdat <- newdat[, unlist(vartype[c("Y", "X", "M", "C")])]
  
  modmat <- model.matrix(fit2$formula, newdat)
  
  return(list(newdat = newdat, modmat = modmat))
}


## WEIGHTED IMPUTATION-BASED APPROACH

xFit <- glm(att ~ gender + educ + age, data = UPBdata)
impData <- neImpute(UPB ~ att + negaff + gender + educ + age,
                    family = binomial, data = UPBdata)
system.time(
  neMod <- neModel(UPB ~ att0 + att1, family = binomial, 
                   expData = impData, xFit = xFit, nBoot = 100)
)
system.time(
  neMod <- neModel(UPB ~ att0 * att1 + gender + educ + age, family = binomial, 
                   expData = impData, xFit = xFit, nBoot = 100)
)

fitExtr <- function(neMod, expData, xFit) {
    fit1 <- neMod$neModelFit
    fit2 <- attr(expData, "model")
    fit3 <- if (!missing(xFit)) xFit else NULL
    fit <- list(fit1, fit2, fit3)
    fit <- fit[!sapply(fit, is.null)]
    return(fit)
}

(fit <- fitExtr(neMod, impData))
(fit <- fitExtr(neMod, impData, xFit))

coefnames <- lapply(fit, function(x) names(coef(x)))
dimnames <- unlist(coefnames)
ind <- lapply(coefnames, indmatch, dimnames)

## ESTIMATING EQUATIONS (SCORE FUNCTIONS)

estEqList <- lapply(fit, estfun)
estEqList[[1]] <- as.matrix(aggregate(estEqList[[1]], by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])
estEq <- as.matrix(data.frame(estEqList))
rm(estEqList)
dimnames(estEq)[[2]] <- dimnames


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD

# diagonal inv bread (easy!) 
breadInv <- as.matrix(bdiag(lapply(fit, function(x) solve(bread(x)))))
dimnames(breadInv) <- list(dimnames, dimnames)

# off-diagonal: 
# deriv12
X12 <- adaptx(impData, neMod$neModelFit, obs = FALSE)
deriv12 <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$newdat))

breadInv[ind[[1]], ind[[2]]] <- -t(estfun(fit[[1]]) / resid(fit[[1]], type = "response")) %*% deriv12 / nrow(fit[[1]]$data)

# deriv13
if (length(fit) > 2) {
    derivFUN <- switch(fit[[3]]$family$family, 
                       gaussian = deriv(~ (- (X - mu)^2 / (2 * sigma^2)), "mu"), 
                       binomial = deriv(~ (X * log(mu) + (1-X) * log(1-mu)), "mu"), 
                       poisson = deriv(~ (X * log(mu) - mu), "mu"))
    sigma <- sqrt(summary(fit[[3]])$dispersion)
    X13 <- adaptx(impData, neMod$neModelFit, obs = TRUE, xFit = fit[[3]])
    mu <- predict(fit[[3]], newdata = X13$newdat, type = "response")
    X <- X13$newdat[, attr(terms(neMod), "vartype")$X]
    if (!is.numeric(X)) X <- as.numeric(X) - 1
    deriv13 <- - X13$modmat * fit[[3]]$family$mu.eta(predict(fit[[3]], newdat = X13$newdat)) * as.vector(attr(eval(derivFUN), "gradient"))
    breadInv[ind[[1]], ind[[3]]] <- -t(estfun(fit[[1]])) %*% deriv13 / nrow(fit[[1]]$data)
}

bread <- solve(breadInv)

vcov <- as.matrix((bread %*% meat %*% t(bread)) / nrow(estEq))
sqrt(diag(vcov)[ind[[1]]])

sqrt(diag(vcov(neMod)))



## WEIGHTED WEIGHTING-BASED APPROACH

# UPBdata$negaffbin <- factor(cut(UPBdata$negaff, 2), labels = c("L", "H"))
# UPBdata$negaffbin <- as.numeric(UPBdata$negaffbin) - 1
# weightData <- neWeight(negaffbin ~ att + gender + educ + age,
#                        family = binomial("logit"), data = UPBdata)
# 
# UPBdata$negaffbin <- factor(cut(UPBdata$negaff, 2), labels = c("L", "H"))
# weightData <- neWeight(negaffbin ~ att + gender + educ + age,
#                        family = binomial("probit"), data = UPBdata)
# 
# UPBdata$negaffcount <- as.numeric(UPBdata$negaffcat)
# weightData <- neWeight(negaffcount ~ att + gender + educ + age,
#                        family = poisson, data = UPBdata)

# xFit <- glm(attbin ~ gender + educ + age, family = binomial, data = UPBdata)
# weightData <- neWeight(negaff ~ factor(attbin) + gender + educ + age,
#                        data = UPBdata)
# system.time(
#   neMod <- neModel(UPB ~ attbin0 + attbin1, family = binomial, 
#                    expData = weightData, xFit = xFit, nBoot = 10)
# )

xFit <- glm(att ~ gender + educ + age, data = UPBdata)
weightData <- neWeight(negaff ~ att + gender + educ + age,
                       data = UPBdata)
system.time(
  neMod <- neModel(UPB ~ att0 + att1, family = binomial, 
                   expData = weightData, xFit = xFit, nBoot = 100)
)

fitExtr <- function(neMod, expData, xFit) {
    fit1 <- neMod$neModelFit
    fit2 <- attr(expData, "model")
    fit3 <- if (!missing(xFit)) xFit else NULL
    fit <- list(fit1, fit2, fit3)
    fit <- fit[!sapply(fit, is.null)]
    return(fit)
}

(fit <- fitExtr(neMod, weightData))
(fit <- fitExtr(neMod, weightData, xFit))

coefnames <- lapply(fit, function(x) names(coef(x)))
dimnames <- unlist(coefnames)
ind <- lapply(coefnames, indmatch, dimnames)

## ESTIMATING EQUATIONS (SCORE FUNCTIONS)

estEqList <- lapply(fit, estfun)
estEqList[[1]] <- as.matrix(aggregate(estEqList[[1]], by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])
estEq <- as.matrix(data.frame(estEqList))
rm(estEqList)
dimnames(estEq)[[2]] <- dimnames


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD

# diagonal inv bread (easy!) 
breadInv <- as.matrix(bdiag(lapply(fit, function(x) solve(bread(x)))))
dimnames(breadInv) <- list(dimnames, dimnames)


# off-diagonal: 

# deriv12
derivFUN <- switch(fit[[2]]$family$family, 
                   gaussian = deriv(~ (- (M - mu)^2 / (2 * sigma^2)), "mu"), 
                   binomial = deriv(~ (M * log(mu) + (1-M) * log(1-mu)), "mu"), 
                   poisson = deriv(~ (M * log(mu) - mu), "mu"))
sigma <- sqrt(summary(fit[[2]])$dispersion)
# first
X12 <- adaptx(weightData, neMod$neModelFit, obs = FALSE)
mu <- predict(fit[[2]], newdat = X12$newdat, type = "response")
M <- X12$newdat[, attr(terms(neMod), "vartype")$M]
if (!is.numeric(M)) M <- as.numeric(M) - 1
deriv12a <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$newdat)) * as.vector(attr(eval(derivFUN), "gradient"))

# second
X12 <- adaptx(weightData, neMod$neModelFit, obs = TRUE)
mu <- predict(fit[[2]], newdat = X12$newdat, type = "response")
M <- X12$newdat[, attr(terms(neMod), "vartype")$M]
if (!is.numeric(M)) M <- as.numeric(M) - 1
deriv12b <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$newdat)) * as.vector(attr(eval(derivFUN), "gradient"))

deriv12 <- deriv12a - deriv12b
breadInv[ind[[1]], ind[[2]]] <- -t(estfun(fit[[1]])) %*% deriv12 / nrow(fit[[1]]$data) 


# deriv13
if (length(fit) > 2) {
    derivFUN <- switch(fit[[3]]$family$family, 
                       gaussian = deriv(~ (- (X - mu)^2 / (2 * sigma^2)), "mu"), 
                       binomial = deriv(~ (X * log(mu) + (1-X) * log(1-mu)), "mu"), 
                       poisson = deriv(~ (X * log(mu) - mu), "mu"))
    sigma <- sqrt(summary(fit[[3]])$dispersion)
    X13 <- adaptx(weightData, neMod$neModelFit, obs = TRUE, xFit = fit[[3]])
    mu <- predict(fit[[3]], newdata = X13$newdat, type = "response")
    X <- X13$newdat[, attr(terms(neMod), "vartype")$X]
    if (!is.numeric(X)) X <- as.numeric(X) - 1
    deriv13 <- - X13$modmat * fit[[3]]$family$mu.eta(predict(fit[[3]], newdat = X13$newdat)) * as.vector(attr(eval(derivFUN), "gradient"))
    breadInv[ind[[1]], ind[[3]]] <- -t(estfun(fit[[1]])) %*% deriv13 / nrow(fit[[1]]$data)
}


bread <- solve(breadInv)

vcov <- as.matrix((bread %*% meat %*% t(bread)) / nrow(estEq))
sqrt(diag(vcov)[ind[[1]]])

sqrt(diag(vcov(neMod)))


### BRINGING THE TWO TOGETHER:

xFit <- glm(att ~ gender + educ + age, data = UPBdata)
weightData <- neWeight(negaff ~ att + gender + educ + age,
                       data = UPBdata)
system.time(
  neMod <- neModel(UPB ~ att0 + att1, family = binomial, 
                   expData = weightData, xFit = xFit, nBoot = 100)
)

fitExtr <- function(neMod, expData, xFit) {
  fit1 <- neMod$neModelFit
  fit2 <- attr(expData, "model")
  fit3 <- if (!missing(xFit)) xFit else NULL
  fit <- list(fit1, fit2, fit3)
  fit <- fit[!sapply(fit, is.null)]
  return(fit)
}

(fit <- fitExtr(neMod, weightData))
(fit <- fitExtr(neMod, weightData, xFit))

coefnames <- lapply(fit, function(x) names(coef(x)))
dimnames <- unlist(coefnames)
ind <- lapply(coefnames, indmatch, dimnames)

## ESTIMATING EQUATIONS (SCORE FUNCTIONS)

estEqList <- lapply(fit, estfun)
estEqList[[1]] <- as.matrix(aggregate(estEqList[[1]], by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])
estEq <- as.matrix(data.frame(estEqList))
rm(estEqList)
dimnames(estEq)[[2]] <- dimnames


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD

# diagonal inv bread (easy!) 
breadInv <- as.matrix(bdiag(lapply(fit, function(x) solve(bread(x)))))
dimnames(breadInv) <- list(dimnames, dimnames)


# off-diagonal: 

# deriv12
if (inherits(expData, "weightData")) {
    derivFUN <- switch(fit[[2]]$family$family, 
                       gaussian = deriv(~ (- (M - mu)^2 / (2 * sigma^2)), "mu"), 
                       binomial = deriv(~ (M * log(mu) + (1-M) * log(1-mu)), "mu"), 
                       poisson = deriv(~ (M * log(mu) - mu), "mu"))
    sigma <- sqrt(summary(fit[[2]])$dispersion)
    # first
    X12 <- adaptx(weightData, neMod$neModelFit, obs = FALSE)
    mu <- predict(fit[[2]], newdat = X12$newdat, type = "response")
    M <- X12$newdat[, attr(terms(neMod), "vartype")$M]
    if (!is.numeric(M)) M <- as.numeric(M) - 1
    deriv12a <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$newdat)) * as.vector(attr(eval(derivFUN), "gradient"))
    
    # second
    X12 <- adaptx(weightData, neMod$neModelFit, obs = TRUE)
    mu <- predict(fit[[2]], newdat = X12$newdat, type = "response")
    M <- X12$newdat[, attr(terms(neMod), "vartype")$M]
    if (!is.numeric(M)) M <- as.numeric(M) - 1
    deriv12b <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$newdat)) * as.vector(attr(eval(derivFUN), "gradient"))
    
    deriv12 <- deriv12a - deriv12b
    breadInv[ind[[1]], ind[[2]]] <- -t(estfun(fit[[1]])) %*% deriv12 / nrow(fit[[1]]$data)
}
else if (inherits(expData, "impData")) {
    X12 <- adaptx(impData, neMod$neModelFit, obs = FALSE)
    deriv12 <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$newdat))
    
    breadInv[ind[[1]], ind[[2]]] <- -t(estfun(fit[[1]]) / resid(fit[[1]], type = "response")) %*% deriv12 / nrow(fit[[1]]$data)
}


# deriv13
if (length(fit) > 2) {
  derivFUN <- switch(fit[[3]]$family$family, 
                     gaussian = deriv(~ (- (X - mu)^2 / (2 * sigma^2)), "mu"), 
                     binomial = deriv(~ (X * log(mu) + (1-X) * log(1-mu)), "mu"), 
                     poisson = deriv(~ (X * log(mu) - mu), "mu"))
  sigma <- sqrt(summary(fit[[3]])$dispersion)
  X13 <- adaptx(weightData, neMod$neModelFit, obs = TRUE, xFit = fit[[3]])
  mu <- predict(fit[[3]], newdata = X13$newdat, type = "response")
  X <- X13$newdat[, attr(terms(neMod), "vartype")$X]
  if (!is.numeric(X)) X <- as.numeric(X) - 1
  deriv13 <- - X13$modmat * fit[[3]]$family$mu.eta(predict(fit[[3]], newdat = X13$newdat)) * as.vector(attr(eval(derivFUN), "gradient"))
  breadInv[ind[[1]], ind[[3]]] <- -t(estfun(fit[[1]])) %*% deriv13 / nrow(fit[[1]]$data)
}


bread <- solve(breadInv)

vcov <- as.matrix((bread %*% meat %*% t(bread)) / nrow(estEq))
sqrt(diag(vcov)[ind[[1]]])

sqrt(diag(vcov(neMod)))