## imputation model
#####

# logit vs probit!
library(medflex)
impData <- neImpute(UPB ~ att + negaff + gender + educ + age,
                    family = binomial, data = UPBdata)
impFit1 <- neModel(UPB ~ att0 + att1 + gender + educ + age,
                   family = binomial, expData = impData, nBoot = 10)
summary(impFit1)

#head(model.matrix(attr(impData, "model")))
#coef(attr(impData, "model"))

## g^(-1) linfun
fit <- attr(impData, "model")

# respfun <- fit$family$linkinv
# x <- model.matrix(fit)
# coef <- coef(fit)
# 
# linfun <- function(x, y) t(apply(x, 1, `*`, y))
# linfun(x, coef)
# # predict(attr(impData, "model"), type = "terms")
# # identical, except intercept not included!
# res <- numericDeriv(quote(respfun(linfun(x, coef))), "coef")

linkform <- "fit$family$linkinv("
terms <- make.names(attr(coef(fit), "names"))
parms <- paste0(terms, "Est")  

derivenv <- list2env(as.list(data.frame(model.matrix(fit))), parent = parent.frame())
funcform <- as.list(parse(text = paste("fit$family$linkinv(", paste(parms, terms, sep = "*", collapse = "+"), ")", sep = "")))[[1]]
lapply(seq_along(parms), function(i, x, y, env) assign(as.character(x[i]), as.numeric(y[i]), env = env), parms, coef(fit), derivenv)

deriv <- numericDeriv(expr = funcform, theta = parms, rho = derivenv)
deriv <- data.frame(attr(deriv,"gradient"))
colnames(deriv) <- attr(coef(fit),"names")

var <- fit$family$variance(fit$fitted) #* summary.glm(fit)$dispersion
### dispersion???? => should be commented away, otherwise doesn't work for gaussian!?
tmp <- deriv / var

head(tmp)
head(model.matrix(fit))

estEq <- as.matrix(deriv * residuals(fit, "response") / fit$family$variance(fit$fitted))
meat <- crossprod(estEq) / nrow (estEq)
bread <- solve(t(as.matrix(deriv)) %*% (as.matrix(deriv) / fit$family$variance(fit$fitted)) / nrow(fit$data))
vcov <- (t(bread) %*% meat %*% bread) / nrow(fit$data)
# sqrt(diag(vcov))

library(geepack)
impGEE <- geeglm(UPB ~ att + negaff + gender + educ + age, family = binomial, data = UPBdata, id = rownames(UPBdata))
summary(impGEE)$cov.scaled
vcov

library(geeM)
impGEE2 <- geem(UPB ~ att + negaff + gender + educ + age, family = binomial, data = UPBdata, id = rownames(UPBdata))
impGEE2$var
str(impGEE2, max.level = 1)

library(sandwich)
sandwich(fit1)
bread(fit1)

head(estfun(fit1))
head(estEq)

#head(t(impGEE$geese$infls))
#head(deriv * residuals(fit, "response"))

########
# natural effect model
###

fit <- impFit1$neModelFit

linkform <- "fit$family$linkinv("
terms <- make.names(attr(coef(fit), "names"))
parms <- paste0(terms, "Est")  

derivenv <- list2env(as.list(data.frame(model.matrix(fit))), parent = parent.frame())
funcform <- as.list(parse(text = paste("fit$family$linkinv(", paste(parms, terms, sep = "*", collapse = "+"), ")", sep = "")))[[1]]
lapply(seq_along(parms), function(i, x, y, env) assign(as.character(x[i]), as.numeric(y[i]), env = env), parms, coef(fit), derivenv)

deriv <- numericDeriv(expr = funcform, theta = parms, rho = derivenv)
deriv <- data.frame(attr(deriv,"gradient"))
colnames(deriv) <- attr(coef(fit),"names")

estEq <- as.matrix(deriv * residuals(fit, "response") / fit$family$variance(fit$fitted))
estEq <- as.data.frame(estEq)
estEq <- aggregate(estEq, by = list(as.numeric(fit$data$id)), FUN = mean)[, -1]

meat <- crossprod(as.matrix(estEq)) / nrow(estEq)
bread <- solve(t(as.matrix(deriv)) %*% (as.matrix(deriv) / fit$family$variance(fit$fitted)) / nrow(fit$data))
vcov <- (bread %*% meat %*% t(bread)) / length(unique(fit$data$id))

neGEE <- geeglm(UPB ~ att0 + att1 + gender + educ + age, family = binomial, data = impData, id = impData$id, scale.fix = T) # scale.fix????
summary(neGEE)$cov.scaled
vcov

#neGEE$geese$vbeta

#neGEE$geese$vbeta.naiv #?
#head(t(neGEE$geese$infls))
head(estEq)

# in geese.fit => gee_rap called (C interface? from gee package?) to get to geese$infls (similar to estimating equations)



###### PUTTING IT ALL TOGETHER

#UPBdata$gender <- relevel(UPBdata$gender, ref = "M")
#UPBdata$educ <- relevel(UPBdata$educ, ref = "H")

impData <- neImpute(UPB ~ att + negaff + gender + educ + age,
                    family = binomial("probit"), data = UPBdata)
impFit1 <- neModel(UPB ~ att0 + att1 + gender + educ + age,
                   family = binomial("probit"), expData = impData, nBoot = 100)

fit1 <- attr(impData, "model")
fit2 <- impFit1$neModelFit

linkform1 <- "fit1$family$linkinv("
terms1 <- make.names(attr(coef(fit1), "names"))
parms1 <- paste0(terms1, "Est")  

derivenv1 <- list2env(as.list(data.frame(model.matrix(fit1))), parent = parent.frame())
funcform1 <- as.list(parse(text = paste("fit1$family$linkinv(", paste(parms1, terms1, sep = "*", collapse = "+"), ")", sep = "")))[[1]]
lapply(seq_along(parms1), function(i, x, y, env) assign(as.character(x[i]), as.numeric(y[i]), env = env), parms1, coef(fit1), derivenv1)

deriv1 <- numericDeriv(expr = funcform1, theta = parms1, rho = derivenv1)
rm(derivenv1)
deriv1 <- data.frame(attr(deriv1,"gradient"))
colnames(deriv1) <- terms1

estEq1 <- as.matrix(deriv1 * residuals(fit1, "response") / (fit1$family$variance(fit1$fitted) * summary(fit1)$dispersion))
colnames(estEq1) <- colnames(deriv1)

# library(sandwich)
# head(estEq1)
# head(estfun(fit1))
# head(model.matrix(fit1) * residuals(fit1, "response"))
# 
# head(deriv1)
# head(model.matrix(fit1) * fit1$family$variance(fit1$fitted))
# head(estfun(fit1) * fit1$family$variance(fit1$fitted) / residuals(fit1, "response"))

#head(residuals(fit1, "response"))
#head(residuals(fit1, "working") * weights(fit1, "working"))

linkform2 <- "fit2$family$linkinv("
terms2 <- make.names(attr(coef(fit2), "names"))
parms2 <- paste0(terms2, "Est")  

derivenv2 <- list2env(as.list(data.frame(model.matrix(fit2))), parent = parent.frame())
funcform2 <- as.list(parse(text = paste("fit2$family$linkinv(", paste(parms2, terms2, sep = "*", collapse = "+"), ")", sep = "")))[[1]]
lapply(seq_along(parms2), function(i, x, y, env) assign(as.character(x[i]), as.numeric(y[i]), env = env), parms2, coef(fit2), derivenv2)

deriv2 <- numericDeriv(expr = funcform2, theta = parms2, rho = derivenv2)
rm(derivenv2)
deriv2 <- data.frame(attr(deriv2,"gradient"))
colnames(deriv2) <- terms2

estEq2 <- as.matrix(deriv2 * residuals(fit2, "response") / (fit2$family$variance(fit2$fitted) * summary(fit2)$dispersion))
estEq2 <- as.data.frame(estEq2)

head(estEq2)
head(estfun(fit2))

estEq2 <- aggregate(estEq2, by = list(as.numeric(fit2$data$id)), FUN = mean)[, -1]
colnames(estEq2) <- colnames(deriv2)

estEq <- cbind(estEq1, estEq2)

meat <- crossprod(as.matrix(estEq)) / nrow(estEq)

breadInv11 <- t(as.matrix(deriv1)) %*% (as.matrix(deriv1) / (fit1$family$variance(fit1$fitted) * summary(fit1)$dispersion)) / nrow(fit1$data)
breadInv22 <- t(as.matrix(deriv2)) %*% (as.matrix(deriv2) / (fit2$family$variance(fit2$fitted) * summary(fit2)$dispersion)) / nrow(fit2$data)

solve(breadInv11)
bread(fit1)
solve(breadInv22)
bread(fit2)

# hieronder: in de plaats: nieuw glm object met nieuwe model matrix + estfun hierop toepassen?
# moeilijk!!!

ind <- rep(seq.int(nrow(fit1$data)), each = nrow(fit2$data) / nrow(fit1$data))
#breadInv21 <- -t(as.matrix(deriv2) / (fit2$family$variance(fit2$fitted) * summary(fit2)$dispersion)) %*% as.matrix(deriv1[ind, ]) / nrow(fit2$data)
modmat <- model.matrix(fit1)[ind, ]
modmat[, attr(terms(impData), "vartype")$X] <- model.matrix(fit2)[, attr(terms(impData), "vartype")$Xexp[1]]
#modframe <- model.frame(fit1)[ind, ]
#modframe[, attr(terms(impData), "vartype")$X] <- model.frame(fit2)[, attr(terms(impData), "vartype")$Xexp[1]]
derivenv1b <- list2env(as.list(data.frame(modmat)), parent = parent.frame())
funcform1b <- as.list(parse(text = paste("fit1$family$linkinv(", paste(parms1, terms1, sep = "*", collapse = "+"), ")", sep = "")))[[1]]
lapply(seq_along(parms1), function(i, x, y, env) assign(as.character(x[i]), as.numeric(y[i]), env = env), parms1, coef(fit1), derivenv1b)
deriv1b <- numericDeriv(expr = funcform1, theta = parms1, rho = derivenv1b)
rm(derivenv1b)
deriv1b <- data.frame(attr(deriv1b, "gradient"))
colnames(deriv1b) <- terms1
breadInv21 <- -t(as.matrix(deriv2) / (fit2$family$variance(fit2$fitted) * summary(fit2)$dispersion)) %*% as.matrix(deriv1b) / nrow(fit2$data)

#newdat <- fit2$data
#newdat[, attr(terms(impData), "vartype")$X] <- newdat[, attr(terms(impData), "vartype")$Xexp[1]]

#deriv1b <- modmat * fit1$family$variance(predict(fit1, newdat = modframe, type = "response"))
deriv1b <- modmat * fit1$family$variance(predict(fit1, newdat = modframe, type = "response"))

# estfun(fit1) * fit1$family$variance(fit1$fitted) / residuals(fit1, "response")

#wres <- as.vector(residuals(x, "working")) * weights(x, "working")
# ALTERNATIEF!!! (moeilijkheid: en residuals(x, "working") en vooral weights(x, "working) vervangen)
# residuals zelfs niet nodig!!!
# res <- modframe$UPB - predict(fit1, newdat = modframe, type = "response")
# reswor <- res / fit1$family$mu.eta(predict(fit1, newdat = modframe)) #residuals.glm
# wres <- as.vector(reswor) * (fit1$family$mu.eta(predict(fit1, newdat = modframe))^2)/fit1$family$variance(fit1$family$linkinv(predict(fit1, newdat = modframe)))
# dispersion <- if (substr(fit1$family$family, 1, 17) %in% c("poisson", "binomial", "Negative Binomial")) 1 else sum(wres^2, na.rm = TRUE)/sum(weights(fit1, "working"), na.rm = TRUE)
# rval <- wres * modmat/dispersion
# deriv1b2 <- rval * fit1$family$variance(predict(fit1, newdat = modframe, type = "response")) / res

weights <- (fit1$family$mu.eta(predict(fit1, newdat = modframe))^2)/fit1$family$variance(fit1$family$linkinv(predict(fit1, newdat = modframe))) # glm.fit
dispersion <- if (substr(fit1$family$family, 1, 17) %in% c("poisson", "binomial", "Negative Binomial")) 1 else sum(wres^2, na.rm = TRUE)/sum(weights(fit1, "working"), na.rm = TRUE)
deriv1b2 <- weights * modmat/dispersion * fit1$family$variance(predict(fit1, newdat = modframe, type = "response")) / fit1$family$mu.eta(predict(fit1, newdat = modframe))
head(deriv1b)
head(deriv1b2)

# weights(x, "working") * xmat/dispersion * fit1$family$variance(fit1$fitted) / fit1$family$mu.eta(predict(fit1))
# 
# head(residuals(fit1, "working") / residuals(fit1, "response"))
# head(1/fit1$family$mu.eta(predict(fit1)))

breadInv12 <- matrix(0, nrow = ncol(breadInv21), ncol = nrow(breadInv21), dimnames = list(colnames(breadInv21), rownames(breadInv21)))

bread <- solve(rbind(cbind(breadInv11, breadInv12), 
                     cbind(breadInv21, breadInv22)))

# make.names necessary??

vcov <- (bread %*% meat %*% t(bread)) / length(unique(fit2$data$id))
sqrt(diag(vcov))

sqrt(diag(vcov(impFit1)))

### att0 en att1 OMGEKEERD???!!! 




######

source("~/Documents/ugent/drafts/R package/JSSstyle/flexmed_v0.15d.R")

impData <- ne.impute(UPB ~ attbin + negaff + gender + educ + age, family = binomial, data = UPBdata)
debug(ne.model)
psFit <- ne.glm(attbin ~ negaff + gender + educ + age, family = binomial, data = UPBdata)
impFit1 <- ne.model(UPB ~ attbin.de + attbin.ie, family = binomial, ne.data = impData, bootstrap = FALSE)
summary(impFit1)
impFit1 <- ne.model(UPB ~ attbin.de + attbin.ie, family = binomial, ne.data = impData, ne.glm = list(x = psFit), bootstrap = FALSE)
summary(impFit1)


########
# testing sandwich estimator for weighting-based approach
########

library(medflex)
weightData <- neWeight(negaff ~ att + gender + educ + age, data = UPBdata)
fit1 <- attr(weightData, "model")
neMod <- neModel(UPB ~ att0 + att1 + gender + educ + age, family = binomial, expData = weightData, nBoot = 10)
fit2 <- neMod$neModelFit

ind <- rep(seq.int(nrow(fit1$data)), each = nrow(fit2$data) / nrow(fit1$data))
modmat <- model.matrix(fit1)[ind, ]
modmat[, attr(terms(impData), "vartype")$X] <- model.matrix(fit2)[, attr(terms(impData), "vartype")$Xexp[2]]
modframe <- model.frame(fit1)[ind, ]
modframe[, attr(terms(impData), "vartype")$X] <- model.frame(fit2)[, attr(terms(impData), "vartype")$Xexp[2]]
....

# sigma <- summary(fit1)$dispersion
# mu <- fitted(fit1)
# M <- UPBdata$negaff
# derivFUN <- deriv(~ dnorm((M - mu) / sigma), "mu")
# dfmudmu <- eval(derivFUN)
# 
# head(estfun(fit1))
# head(estfun(fit1) * dfmudmu)


