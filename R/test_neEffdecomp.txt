library(medflex)

xRef <- c(1, 0)

impData <- neImpute(UPB ~ att * negaff * gender + educ + age,
                    family = binomial, data = UPBdata)
# impData <- neImpute(UPB ~ poly(att, 2, raw = TRUE) + negaff + gender + educ + age,
#                     family = binomial, data = UPBdata)

impFit1 <- neModel(UPB ~ att0 * att1 * gender + educ + age,
                   family = binomial, expData = impData, nBoot = 5)
# impFit1 <- neModel(UPB ~ poly(att0, 2, raw = TRUE) * poly(att1, 2, raw = TRUE) + gender + educ + age,
#                    family = binomial, expData = impData, nBoot = 5)

neEffdecomp(impFit1)

# tmp <- lapply(attr(terms(impFit1), "vartype")$Xexp, grep, names(coef(impFit1)))
# #tmp <- lapply(ind, function(x) x + 1)
# ind <- unique(list(setdiff(tmp[[1]], tmp[[2]]), 
#                    setdiff(tmp[[2]], tmp[[1]]),
#                    tmp[[1]], tmp[[2]], sort(union(tmp[[1]], tmp[[2]]))))
#             
# 
# # ind[[3]] <- intersect(ind[[1]], ind[[2]])
# # 
# # if (length(ind[[3]])) {
# #   ind[[1]] <- setdiff(ind[[1]], ind[[3]])
# #   ind[[2]] <- setdiff(ind[[2]], ind[[3]])
# # } else {
# #   ind <- ind[-3]
# # }
# # 
# # nrow <- 2 * length(ind) - 1
# 
# nrow <- length(ind)
# 
# rownames <- if (nrow == 3) {
#   c("natural direct effect", "natural indirect effect", "total effect")
# } else {
#   c("pure direct effect", "total direct effect", "pure indirect effect", "total indirect effect", "total effect")
# }
# 
# K <- matrix(0, nrow = nrow, ncol = length(coef(impFit1)), dimnames = list(rownames, names(coef(impFit1))))
# 
# delta <- 1
# 
# for (i in seq.int(nrow)) {
#   K[i, ind[[i]]] <- delta
# }
# 
# #sort(unique(unlist(lapply(attr(terms(impFit1), "vartype")$Xexp, grep, rownames(K)))))
# #ind <- sort(unique(unlist(lapply(attr(terms(impFit1), "vartype")$Xexp, grep, rownames(K)))))
# #K <- K[ind, ]
# 
# summary(neLht(impFit1, linfct = K))
# 


form <- impFit1$neModelFit$formula
# keep <- attr(terms(form), "term.labels")[!attr(terms(form), "term.labels") %in% attr(terms(impFit1), "vartype")$C]
ind <- sort(unlist(lapply(attr(terms(impFit1), "vartype")$C, grep, attr(terms(form), "term.labels"))))
keep <- attr(terms(form), "term.labels")[-ind]
rhs <- paste(keep, collapse = " + ")
updateForm <- as.formula(paste(form[[2]], "~", rhs))

# also works with I(x^2)??

calcContr <- function(x, formula) {
  dat1 <- data.frame(1, x[1], x[2])
  names(dat1) <- all.vars(formula)
  modmat1 <- model.matrix(formula, data = dat1)
  dat2 <- data.frame(1, x[3], x[4])
  names(dat2) <- all.vars(formula)
  modmat2 <- model.matrix(formula, data = dat2)
  return(t(modmat1 - modmat2))
}

list <- list(xRef[c(1, 2, 2, 2)],
             xRef[c(1, 1, 2, 1)],
             xRef[c(2, 1, 2, 2)],
             xRef[c(1, 1, 1, 2)],
             xRef[c(1, 1, 2, 2)])

K2 <- t(data.frame(lapply(list, calcContr, updateForm)))
K2 <- unique(K2)

rownames <- if (nrow(K2) == 3) {
  c("natural direct effect", "natural indirect effect", "total effect")
} else {
  c("pure direct effect", "total direct effect", "pure indirect effect", "total indirect effect", "total effect")
}
K <- matrix(0, nrow = nrow(K2), ncol = length(coef(impFit1)), dimnames = list(rownames, names(coef(impFit1))))

K[, colnames(K2)] <- K2
colnames(K) <- NULL

lht <- neLht(impFit1, linfct = K)
summary(lht)

summary(neEffdecomp(impFit1))
