library(medflex)

xRef <- c(1, 0)

# impData <- neImpute(UPB ~ att * negaff * gender + educ + age,
#                     family = binomial, data = UPBdata)
# impFit1 <- neModel(UPB ~ att0 * att1 + gender + educ + age,
#                    family = binomial, expData = impData, nBoot = 5)
# 
impData <- neImpute(UPB ~ poly(att, 2, raw = TRUE) * negaff + gender + educ + age,
                    family = binomial, data = UPBdata)
impFit1 <- neModel(UPB ~ poly(att0, 2, raw = TRUE) * poly(att1, 2, raw = TRUE) + gender + educ + age,
                   family = binomial, expData = impData, nBoot = 5)

coef(impFit1)
neEffdecomp(impFit1)
neEffdecomp(impFit1, xRef = c(0, 1))
neEffdecomp(impFit1, xRef = c(1, 0))
neEffdecomp(impFit1, xRef = c(1, 2))

form <- impFit1$neModelFit$formula
ind <- sort(unlist(lapply(attr(terms(impFit1), "vartype")$C, grep, attr(terms(form), "term.labels"))))
keep <- attr(terms(form), "term.labels")[-ind]
rhs <- paste(keep, collapse = " + ")
updateForm <- as.formula(paste(form[[2]], "~", rhs))

# also works with I(x^2)??

calcContr <- function(x, formula) {
  dat1 <- data.frame(1, x[1], x[2])
  names(dat1) <- all.vars(formula)
  modmat1 <- model.matrix(formula, data = dat1)
  dat2 <- data.frame(1, x[3], x[4])
  names(dat2) <- all.vars(formula)
  modmat2 <- model.matrix(formula, data = dat2)
  return(t(modmat1 - modmat2))
}

list <- list(xRef[c(1, 2, 2, 2)],
             xRef[c(1, 1, 2, 1)],
             xRef[c(2, 1, 2, 2)],
             xRef[c(1, 1, 1, 2)],
             xRef[c(1, 1, 2, 2)])

K2 <- t(data.frame(lapply(list, calcContr, updateForm)))
K2 <- unique(K2)

rownames <- if (nrow(K2) == 3) {
  c("natural direct effect", "natural indirect effect", "total effect")
} else {
  c("pure direct effect", "total direct effect", "pure indirect effect", "total indirect effect", "total effect")
}
K <- matrix(0, nrow = nrow(K2), ncol = length(coef(impFit1)), dimnames = list(rownames, names(coef(impFit1))))

K[, colnames(K2)] <- K2
colnames(K) <- NULL

lht <- neLht(impFit1, linfct = K)
summary(lht)

summary(neEffdecomp(impFit1))


## binary exposure
UPBdata$attbin <- factor(UPBdata$attbin, labels = c("L", "H"))

impData <- neImpute(UPB ~ factor(attbin) * negaff * gender + educ + age,
                    family = binomial, data = UPBdata)
head(impData)
impFit1 <- neModel(UPB ~ attbin0 * attbin1 + gender + educ + age,
                   family = binomial, expData = impData, nBoot = 5)
summary(impFit1)
summary(neEffdecomp(impFit1))
summary(neEffdecomp(impFit1, xRef = c("0", "1")))

# debug(medflex:::neEffdecomp.neModel)
neEffdecomp(impFit1, xRef = c("1", "2"))
neEffdecomp(impFit1, xRef = c(1, 2))
neEffdecomp(impFit1, xRef = c("H", "L"))
neEffdecomp(impFit1, xRef = c("L", "H"))

# debug(medflex:::neEffdecomp.neModel)
# neEffdecomp(impFit1)

# levels(model$neModelFit$data[, attr(terms(model), "vartype")$Xexp[[1]]])

## multicategorical exposure
impData <- neImpute(UPB ~ negaffcat * att * gender + educ + age,
                    family = binomial, data = UPBdata)
head(impData)
impFit1 <- neModel(UPB ~ negaffcat0 * negaffcat1 + gender + educ + age,
                   family = binomial, expData = impData, nBoot = 5)
summary(impFit1)

# debug(medflex:::neEffdecomp.neModel)
neEffdecomp(impFit1)
neEffdecomp(impFit1, xRef = c("L", "M"))
neEffdecomp(impFit1, xRef = c("L", "H"))

neEffdecomp(impFit1, xRef = c("M", "L"))
neEffdecomp(impFit1, xRef = c("H", "L"))

neEffdecomp(impFit1, xRef = c("M", "H"))
neEffdecomp(impFit1, xRef = c("H", "M"))

