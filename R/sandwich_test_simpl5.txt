library(medflex)
library(sandwich)
library(Matrix)

indmatch <- function (x, y) {
  tmp <- which(sapply(seq.int(length(y) - length(x) + 1), function(i) identical(x, y[i + (seq_along(x)-1)])))
  return(seq.int(x) - 1 + tmp)
}

adaptx <- function(FUN, expData, neModelFit, obs = NULL) {
  fit1 <- neModelFit
  fit2 <- attr(expData, "model")
  vartype <- attr(terms(expData), "vartype")
  tmp <- FUN(fit1)
  tmp <- cbind(tmp, M = fit1$data[, vartype$M])
  colnames(tmp)[ncol(tmp)] <- vartype$M
  if (all(inherits(expData, "weightData"), obs == FALSE)) { 
    colnames(tmp) <- gsub(vartype$Xexp[[2]], vartype$X, colnames(tmp)) 
  } 
  else {
    colnames(tmp) <- gsub(vartype$Xexp[[1]], vartype$X, colnames(tmp))
  } 
  tmp <- tmp[, colnames(FUN(fit2))]
  return(tmp)
}


## IMPUTATION-BASED APPROACH

impData <- neImpute(UPB ~ att + negaff + gender + educ + age,
                    family = binomial, data = UPBdata)
system.time(
  neMod <- neModel(UPB ~ att0 + att1 + gender + educ + age,
                   family = binomial, expData = impData, nBoot = 100)
)
fit1 <- neMod$neModelFit
fit2 <- attr(impData, "model")
fit <- list(fit1, fit2)

coefnames <- lapply(fit, function(x) names(coef(x)))
dimnames <- unlist(coefnames)
ind <- lapply(coefnames, indmatch, dimnames) # ind nog nodig???? => alternatief??

## ESTIMATING EQUATIONS (SCORE FUNCTIONS)

# estEq1 <- estfun(fit1)
# estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])
# estEq2 <- estfun(fit2)
# estEq <- cbind(estEq1, estEq2)

estEqList <- lapply(fit, estfun)
estEqList[[1]] <- as.matrix(aggregate(estEqList[[1]], by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])
estEq <- as.matrix(data.frame(estEqList))
dimnames(estEq)[[2]] <- dimnames
# rm(estEqList) ???

## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD
# diagonal inv bread (easy!) 
# breadInv <- as.matrix(bdiag(solve(bread(fit1)), solve(bread(fit2))))
breadInv <- as.matrix(bdiag(lapply(fit, function(x) solve(bread(x)))))
dimnames(breadInv) <- list(dimnames, dimnames)

# off-diagonal
# xmat12 <- adaptx(model.matrix, impData, neMod$neModelFit)
# xframe12 <- adaptx(model.frame, impData, neMod$neModelFit)
# 
# deriv12 <- xmat12 * fit2$family$mu.eta(predict(fit2, newdat = xframe12))

X12 <- lapply(list(modmat = model.matrix, modframe = model.frame), adaptx, impData, neMod$neModelFit)
deriv12 <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$modframe))

breadInv12 <- -t(estfun(fit[[1]]) / resid(fit[[1]], type = "response")) %*% deriv12 / nrow(fit[[1]]$data)

breadInv[ind[[1]], ind[[2]]] <- breadInv12
# breadInv <- Matrix(breadInv, sparse = TRUE)

bread <- solve(breadInv)

vcov <- as.matrix((bread %*% meat %*% t(bread)) / nrow(estEq))
# dimnames(vcov) <- list(dimnames, dimnames)
sqrt(diag(vcov))

sqrt(diag(vcov(neMod)))



## WEIGHTING-BASED APPROACH

weightData <- neWeight(negaff ~ att + gender + educ + age,
                       data = UPBdata)
system.time(
  neMod <- neModel(UPB ~ att0 + att1 + gender + educ + age,
                   family = binomial, expData = weightData, nBoot = 100)
)
fit1 <- neMod$neModelFit
fit2 <- attr(weightData, "model")

dimnames <- c(names(coef(fit1)), names(coef(fit2)))
ind1 <- indmatch(names(coef(fit1)), dimnames)
ind2 <- indmatch(names(coef(fit2)), dimnames)

## ESTIMATING EQUATIONS (SCORE FUNCTIONS)
estEq1 <- estfun(fit1)
estEq1 <- as.matrix(aggregate(estEq1, by = list(as.numeric(fit1$data$id)), FUN = mean)[, -1])

estEq2 <- estfun(fit2)

estEq <- cbind(estEq1, estEq2)


## MEAT
meat <- crossprod(estEq) / nrow(estEq)


## BREAD
# diagonal inv bread (easy!) 
breadInv <- as.matrix(bdiag(solve(bread(fit1)), solve(bread(fit2))))
dimnames(breadInv) <- list(dimnames, dimnames)

# off-diagonal
sigma <- sqrt(summary(fit2)$dispersion)
derivFUN <- deriv(~ (sqrt(2 * pi) * sigma)^(-1) * exp(- (M - mu)^2 / (2 * sigma^2)), "mu")

# numerator
xmat12num <- adaptx(model.matrix, weightData, neMod$neModelFit, obs = FALSE)
xframe12num <- adaptx(model.frame, weightData, neMod$neModelFit, obs = FALSE)
mu <- predict(fit2, newdat = xframe12num, type = "response")
M <- xframe12num[, attr(terms(neMod), "vartype")$M]
deriv12densnum <- eval(derivFUN)
deriv12num <- xmat12num * fit2$family$mu.eta(predict(fit2, newdat = xframe12num)) * as.vector(attr(deriv12densnum, "gradient"))

# denominator
xmat12denom <- adaptx(model.matrix, weightData, neMod$neModelFit, obs = TRUE)
xframe12denom <- adaptx(model.frame, weightData, neMod$neModelFit, obs = TRUE)
mu <- predict(fit2, newdat = xframe12denom, type = "response")
M <- xframe12denom[, attr(terms(neMod), "vartype")$M]
deriv12densdenom <- eval(derivFUN)
# head(deriv12densdenom)
# head(dnorm(M, mu, sigma))
deriv12denom <- xmat12denom * fit2$family$mu.eta(predict(fit2, newdat = xframe12denom)) * as.vector(attr(deriv12densdenom, "gradient"))

# w <- deriv12densnum / deriv12densdenom

# quotient rule
deriv12 <- (deriv12num * deriv12densdenom - deriv12denom * deriv12densnum) / deriv12densdenom^2

### ALTERNATIVE TO QUOTIENT RULE: exp(log(ratio))

derivFUN <- switch(fit[[2]]$family$family, 
                   gaussian = deriv(~ (- (M - mu)^2 / (2 * sigma^2)), "mu"), 
                   binomial = derivFUN <- deriv(~ ((mu)^M * (1-mu)^(1-M)), "mu"), 
                   poisson = deriv(~ (mu^M * exp(-mu)) , "mu"))


# first
X12 <- lapply(list(modmat = model.matrix, modframe = model.frame), adaptx, weightData, neMod$neModelFit, obs = FALSE)
mu <- predict(fit[[2]], newdat = X12$modframe, type = "response")
M <- X12$modframe[, attr(terms(neMod), "vartype")$M]
deriv12a <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$modframe)) * as.vector(attr(eval(derivFUN), "gradient"))
  
# xmat12num <- adaptx(model.matrix, weightData, neMod$neModelFit, obs = FALSE)
# xframe12num <- adaptx(model.frame, weightData, neMod$neModelFit, obs = FALSE)
# mu <- predict(fit2, newdat = xframe12num, type = "response")
# M <- xframe12num[, attr(terms(neMod), "vartype")$M]
# deriv12densnum <- eval(derivFUN)
# deriv12num <- xmat12num * fit2$family$mu.eta(predict(fit2, newdat = xframe12num)) * as.vector(attr(deriv12densnum, "gradient"))

# second
X12 <- lapply(list(modmat = model.matrix, modframe = model.frame), adaptx, weightData, neMod$neModelFit, obs = TRUE)
mu <- predict(fit[[2]], newdat = X12$modframe, type = "response")
M <- X12$modframe[, attr(terms(neMod), "vartype")$M]
deriv12b <- X12$modmat * fit[[2]]$family$mu.eta(predict(fit[[2]], newdat = X12$modframe)) * as.vector(attr(eval(derivFUN), "gradient"))

# xmat12denom <- adaptx(model.matrix, weightData, neMod$neModelFit, obs = TRUE)
# xframe12denom <- adaptx(model.frame, weightData, neMod$neModelFit, obs = TRUE)
# mu <- predict(fit2, newdat = xframe12denom, type = "response")
# M <- xframe12denom[, attr(terms(neMod), "vartype")$M]
# deriv12densdenom <- eval(derivFUN)
# deriv12denom <- xmat12denom * fit2$family$mu.eta(predict(fit2, newdat = xframe12denom)) * as.vector(attr(deriv12densdenom, "gradient"))

# 
deriv12 <- weights(fit1) * (deriv12a - deriv12b)

###

#deriv12 <- deriv12old 
breadInv12 <- -t(estfun(fit1)) %*% deriv12 / nrow(fit1$data) 

breadInv[ind1, ind2] <- breadInv12
breadInv <- Matrix(breadInv, sparse = TRUE)

bread <- solve(breadInv)

vcov <- as.matrix((bread %*% meat %*% t(bread)) / nrow(estEq))
dimnames(vcov) <- list(dimnames, dimnames)
sqrt(diag(vcov))

sqrt(diag(vcov(neMod)))
